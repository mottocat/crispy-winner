require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:product) { create :product  }
  let(:author) { create :user  }
  let!(:comment) { create :comment, product: product, author: author }

  before do
    sign_in author
  end
  
  describe "GET #show" do
    it "assigns the requested comment as @comment" do
      get :show, params: {id: comment.to_param}
      expect(assigns(:comment)).to eq(comment)
    end
  end

  describe "GET #edit" do
    it "assigns the requested comment as @comment" do
      get :edit, params: {id: comment.to_param}
      expect(assigns(:comment)).to eq(comment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Comment" do
        expect {
          post :create, params: {product_id: product.id, comment: attributes_for(:comment)}
        }.to change{ product.comments.count }.by(1)
      end

      it "assigns a newly created comment as @comment" do
        post :create, params: {product_id: product.id, comment: attributes_for(:comment)}
        expect(assigns(:comment)).to be_a(Comment)
        expect(assigns(:comment)).to be_persisted
      end
      
      it "flashes the success message" do
        put :create, params: {
          product_id: product.to_param,
          comment: attributes_for(:comment)
        }
        expect(flash[:notice]).to eq("Comment was successfully created.")
      end
      
      it "redirects to the created comment" do
        post :create, params: {
          comment: attributes_for(:comment),
          product_id: product.id
        }
        expect(response).to redirect_to(product_comments_path(assigns(:comment).product))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved comment as @comment" do
        post :create, params: {
          product_id: product.id,
          comment: attributes_for(:comment, body: nil)
        }
        expect(assigns(:comment)).to be_a_new(Comment)
      end

      it "re-renders the 'new' template" do
        post :create, params: {
          product_id: product.to_param,
          comment: attributes_for(:comment, body: nil)
        }
        expect(response).to render_template("comments/index")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested comment" do
        put :update, params: {
          id: comment.to_param,
          product_id: product.to_param,
          comment: attributes_for(:comment, body: "a new body")
        }
        comment.reload
        expect(comment.body).to eq("a new body")
      end

      it "assigns the requested comment as @comment" do
        put :update, params: {
          id: comment.to_param,
          product_id: product.to_param,
          comment: attributes_for(:comment)
        }
        expect(assigns(:comment)).to eq(comment)
      end

      it "redirects to the comment" do
        put :update, params: {
          product_id: product.to_param,
          id: comment.to_param,
          comment: attributes_for(:comment)
        }
        expect(response).to redirect_to(comment)
      end
      
      it "flashes the success message" do
        put :update, params: {
          product_id: product.to_param,
          id: comment.to_param,
          comment: attributes_for(:comment)
        }
        expect(flash[:notice]).to eq("Comment was successfully updated.")
      end
    end

    context "with invalid params" do
      it "assigns the comment as @comment" do
        put :update, params: {
          product_id: product.to_param,
          id: comment.to_param,
          comment: attributes_for(:comment, body: nil)
        }
        expect(assigns(:comment)).to eq(comment)
      end

      it "re-renders the 'edit' template" do
        put :update, params: {
          product_id: product.to_param,
          id: comment.to_param,
          comment: attributes_for(:comment, body: nil)
        }
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested comment" do
      expect {
        delete :destroy, params: {id: comment.to_param}
      }.to change { product.comments.count }.by(-1)
    end

    it "redirects to the product" do
      delete :destroy, params: {id: comment.to_param}
      expect(response).to redirect_to(product_url(product))
    end
    
    it "flashes the success message" do
      delete :destroy, params: {id: comment.to_param}
      expect(flash[:notice]).to eq("Comment was successfully destroyed.") 
    end
  end

end
